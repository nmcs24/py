#1c
import numpy as np
import matplotlib.pyplot as plt
def f(x):
 return np.log(x) + 5
def g(x):
 return np.log(x) - 5
x = np.linspace(0.01, 10, 100)
y_f = f(x)
y_g = g(x)
plt.plot(x, y_f, label='f(x) = log(x) + 5', linewidth=2, color='blue')
plt.plot(x, y_g, label='g(x) = log(x) - 5', linewidth=1, color='red')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.title('2D Graph of f(x) and g(x)')
plt.show()

#2a
import math
x1, y1 = 0, 0
x2, y2 = 4, 4
x1_rotated = -x1
y1_rotated = -y1
x2_rotated = -x2
y2_rotated = -y2
print("Original Endpoint 1: ({}, {})".format(x1, y1))
print("Original Endpoint 2: ({}, {})".format(x2, y2))
print("Rotated Endpoint 1: ({}, {})".format(x1_rotated, y1_rotated))
print("Rotated Endpoint 2: ({}, {})".format(x2_rotated, y2_rotated))

#2b
import numpy as np
import matplotlib.pyplot as plt
A = np.array([1, 0])
B = np.array([2, -1])
C = np.array([-1, 3])
reflection_line = 3
A_reflected = np.array([A[0], 2*reflection_line - A[1]])
B_reflected = np.array([B[0], 2*reflection_line - B[1]])
C_reflected = np.array([C[0], 2*reflection_line - C[1]])
plt.plot([A[0], B[0], C[0], A[0]], [A[1], B[1], C[1], A[1]], 'bo-', label='Triangle 
ABC')
plt.plot([A_reflected[0], B_reflected[0], C_reflected[0], A_reflected[0]], 
 [A_reflected[1], B_reflected[1], C_reflected[1], A_reflected[1]], 'ro-', 
label='Reflected Triangle ABC')
plt.axhline(y=reflection_line, color='g', linestyle='--', label='Reflection Line 
y=3')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()
plt.title('Reflection of Triangle ABC through y=3')
plt.grid(True)
plt.show()


#3a1
from scipy.optimize import linprog
c = [1, 2, 1]
A = [[1, 0.5, 0.5],
 [-1.5, -2, -1]]
b = [1, -8]
bounds = [(0, None), (0, None), (0, None)]
ineq_ops = ['<=', '>=']
res = linprog(c, A_ub=A, b_ub=b, bounds=bounds, method='simplex')
print("Optimization Result:")
print("Objective Value (Z):", res.fun)
print("Optimal Solution (x, y, z):", res.x)
OUTPUT:
Optimization Result:
Objective Value (Z): 4.0
Optimal Solution (x, y, z): [0. 2. 0.]


#3b1
import numpy as np
point = np.array([-2, 4])
angle = np.deg2rad(48)
rotation_matrix = np.array([[np.cos(angle), -np.sin(angle)],
 [np.sin(angle), np.cos(angle)]])
rotated_point = np.dot(rotation_matrix, point)
scaling_factor = np.array([[2, 0],
 [0, 1]])
scaled_point = np.dot(scaling_factor, rotated_point)
reflection_matrix = np.array([[1, -4],
 [-4, 1]])
reflected_point = np.dot(reflection_matrix, scaled_point)
shearing_factor = np.array([[1, 7],
 [0, 1]])
sheared_point = np.dot(shearing_factor, reflected_point)
print("Initial Point:", point)
print("Rotated Point:", rotated_point)
print("Scaled Point:", scaled_point)
print("Reflected Point:", reflected_point)
print("Sheared Point:", sheared_point)