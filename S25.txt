#1a
import numpy as np 
import matplotlib.pyplot as plt 
from mpl_toolkits.mplot3d import Axes3D 
def func(x, y): 
 return np.cos(x**2 + y**2 - 0.5) 
x = np.linspace(-1, 1, 100) 
y = np.linspace(-1, 1, 100) 
X, Y = np.meshgrid(x, y) # Create a grid of x, y values 
Z = func(X, Y) # Compute z values using the function 
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d') 
ax.plot_surface(X, Y, Z, cmap='viridis') # Plot the surface 
ax.set_xlabel('X') 
ax.set_ylabel('Y') 
ax.set_zlabel('Z') 
ax.set_title('Surface Plot of z = cos(x**2 + y**2 - 0.5)') 
plt.show() # Show the plot

#1c
import numpy as np
import matplotlib.pyplot as plt
x = np.linspace(-1, 1, 1000)
f_x = np.arcsin(x)
plt.plot(x, f_x)
plt.xlabel('x')
plt.ylabel('f(x)')
plt.title('Plot of f(x) = sin^-1(x)')
plt.grid(True)
plt.axhline(0, color='black', lw=0.5) # Add horizontal grid line at y=0
plt.show()

#2b
from sympy import Point, Line
P = Point(5, 2)
Q = Point(5, -2)
R = Point(5, 0)
collinear = Point.is_collinear(P, Q, R)
if collinear:
 print("Points P, Q, and R are collinear.")
else:
 print("Points P, Q, and R are not collinear.")
ray_PQ = Line(P, Q)
length_PQ = P.distance(Q)
print("Length of ray PQ:", length_PQ)
if ray_PQ.slope == None:
 print("Slope of ray PQ: Undefined (division by zero)")
else:
 print("Slope of ray PQ:", ray_PQ.slope)

#2c
import matplotlib.pyplot as plt
vertices = [(0, 0), (4, 0), (1, 4)]
def is_scalene(vertices):
 x1, y1 = vertices[0]
 x2, y2 = vertices[1]
 x3, y3 = vertices[2]
 return (x1 != x2 and x1 != x3 and x2 != x3) and (y1 != y2 and y1 != y3 and 
y2 != y3)
if is_scalene(vertices):
 print("The triangle is a scalene triangle.")
else:
 print("The triangle is not a scalene triangle.")
x = [point[0] for point in vertices] + [vertices[0][0]]
y = [point[1] for point in vertices] + [vertices[0][1]]
plt.plot(x, y, marker='o', linestyle='-', color='blue')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Triangle with Vertices')
plt.grid(True)
plt.show()

#3a1
import numpy as np
point = np.array([-2, 4])
reflection_x = np.array([[1, 0],[0, -1]])
reflected_point = np.dot(reflection_x, point)
print("Reflection through X-axis:")
print("Initial point:", point)
print("Reflected point:", reflected_point)
scaling_x = np.array([[6, 0],[0, 1]])
scaled_point = np.dot(scaling_x, point)
print("\nScaling in X-coordinate by factor 6:")
print("Initial point:", point)
print("Scaled point:", scaled_point)
shearing_x = np.array([[1, 4],[0, 1]])
sheared_point = np.dot(shearing_x, point)
print("\nShearing in X direction by 4 units:")
print("Initial point:", point)
print("Sheared point:", sheared_point)
angle = np.deg2rad(30)
rotation = np.array([[np.cos(angle), -np.sin(angle)],[np.sin(angle), 
np.cos(angle)]])
rotated_point = np.dot(rotation, point)
print("\nRotate about origin through an angle of 30 degrees:")
print("Initial point:", point)
print("Rotated point:", rotated_point)