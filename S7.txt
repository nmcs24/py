#1a
mport numpy as np 
import matplotlib.pyplot as plt 
def f(x): 
 return x**4 
x = np.linspace(0, 5, 100) 
y = f(x) 
plt.plot(x, y, 'r--o', markersize=6) 
plt.xlabel('x') 
plt.ylabel('f(x)') 
plt.title('Graph of f(x) = x**4') 
plt.show()

#1b
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
x = np.linspace(0, 10, 100)
y = np.linspace(0, 10, 100)
X, Y = np.meshgrid(x, y)
Z = np.sin(X**2 + Y**2)
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z)
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('f(x, y) = sin(x^2 + y^2)')
ax.set_title('3D Surface Plot of f(x, y) = sin(x^2 + y^2)')
plt.show()

#2a
import matplotlib.pyplot as plt
import numpy as np
A = np.array([5, 3])
B = np.array([1, 4])
reflection_line = lambda x: x + 1
plt.plot([A[0], B[0]], [A[1], B[1]], '-o', label='Original Line Segment AB')
x_vals = np.linspace(-5, 5, 100) # Generate x values for the plot
plt.plot(x_vals, reflection_line(x_vals), '-r', label='Reflection Line y = x + 1')
reflected_A = np.array([reflection_line(A[0]), A[0]])
reflected_B = np.array([reflection_line(B[0]), B[0]])
plt.plot([reflected_A[0], reflected_B[0]], [reflected_A[1], reflected_B[1]], '-o', 
label='Reflected Line Segment A\'B\'')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Line Segment Reflection')
plt.legend()
plt.show()

#2b
from sympy import Point, Line
P = Point(5, 2)
Q = Point(5, -2)
R = Point(5, 0)
# Check if points P, Q, and R are collinear
line_PQ = Line(P, Q)
line_PR = Line(P, R)
collinear = line_PQ.is_parallel(line_PR)
if collinear:
 print("Points P, Q, and R are collinear")
else:
 print("Points P, Q, and R are not collinear")
length_PQ = P.distance(Q)
slope_PQ = (Q.y - P.y) / (Q.x - P.x)
print("Length of the ray PQ:", length_PQ)
print("Slope of the ray PQ:", slope_PQ)


#3a1
import numpy as np
from scipy.optimize import linprog
c = [-3.5, -2]
A = [[-1, -1], [-1, 0], [0, 1]]
b = [-5, -4, 2]
x_bounds = (0, None)
y_bounds = (0, None)
result = linprog(c, A_ub=A, b_ub=b, bounds=[x_bounds, y_bounds])
if result.success:
 print("Optimal solution found:")
 print("x =", result.x[0])
 print("y =", result.x[1])
 print("Maximum value of Z =", -result.fun)
else:
 print("Optimal solution not found.")

#3b1
import numpy as np
P = np.array([4, -2])
reflection_y_axis = np.array([-1, 1]) # Reflection matrix through y-axis
P_reflected_y_axis = np.dot(reflection_y_axis, P)
print("Reflection through y-axis:", P_reflected_y_axis)
scaling_x = np.array([3, 1]) # Scaling matrix in X-coordinate by factor 3
P_scaled_x = np.dot(scaling_x, P)
print("Scaling in X-coordinate by factor 3:", P_scaled_x)
angle_pi = np.pi # Angle in radians
rotation_pi = np.array([[np.cos(angle_pi), -np.sin(angle_pi)],
 [np.sin(angle_pi), np.cos(angle_pi)]]) # Rotation matrix about 
origin by angle pi
P_rotated_pi = np.dot(rotation_pi, P)
print("Rotation about origin through angle pi:", P_rotated_pi)
shear_x = np.array([1, -2]) # Shearing matrix in X-direction by -2 units
shear_y = np.array([4, 1]) # Shearing matrix in Y-direction by 4 units
P_sheared = np.dot(shear_x, P) + np.dot(shear_y, P)
print("Shearing in both X and Y Direction by -2 and 4 units respectively:", 
P_sheared)
