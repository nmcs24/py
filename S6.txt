#1b
import numpy as np
import matplotlib.pyplot as plt
def f(x):
 return np.sin(x) - np.exp(x) + 3 * x**2 - np.log10(x)
x = np.linspace(0, 2*np.pi, 500) # 500 points between 0 and 2*pi
y = f(x) # Evaluate f(x) for each x value
plt.plot(x, y)
plt.xlabel('x')
plt.ylabel('f(x)')
plt.title('Graph of f(x) = sin(x) - e**x + 3*x**2 - log10(x)')
plt.grid(True)
plt.show()

#1c
import matplotlib.pyplot as plt
left = [1, 2, 3, 4, 5]
height = [168, 190, 170, 178, 195]
tick_label = ['Pune', 'Mumbai', 'Nasik', 'Nagpur', 'Thane']
plt.barh(left, height, tick_label=tick_label, color='maroon')
plt.xlabel('Air Quality Index')
plt.ylabel('City')
plt.title('Air Quality Index by City (Horizontal Bar Graph)')
plt.show()

#2a
import numpy as np
import matplotlib.pyplot as plt
x1, y1 = 1, 0
x2, y2 = 2, -1
plt.plot([x1, x2], [y1, y2], 'bo-', label='Original Line')
x1_rot, y1_rot = -x1, -y1
x2_rot, y2_rot = -x2, -y2
plt.plot([x1_rot, x2_rot], [y1_rot, y2_rot], 'ro-', label='Rotated Line')
plt.xlim(-3, 3)
plt.ylim(-3, 3)
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Rotation of Line Segment by 180 degrees')
plt.legend()
plt.show()

#2b
import numpy as np
import matplotlib.pyplot as plt
vertices = np.array([[0, 0], [2, 0], [2, 3], [1, 6]])
plt.plot(vertices[:, 0], vertices[:, 1], 'bo-', label='Original Polygon')
vertices_rot = np.flip(vertices, axis=0)
plt.plot(vertices_rot[:, 0], vertices_rot[:, 1], 'ro-', label='Rotated Polygon')
plt.xlim(-1, 3)
plt.ylim(-1, 7)
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Rotation of Polygon by 180 degrees')
plt.legend()
plt.show()

#3a1
from pulp import LpProblem, LpMaximize, LpVariable, LpStatus, 
lpSum, value
prob = LpProblem("MaximizationProblem", LpMaximize)
x = LpVariable('x', lowBound=0)
y = LpVariable('y', lowBound=0)
prob += x + y
prob += 2*x - 2*y >= 1
prob += x + y >= 2
prob.solve()
status = LpStatus[prob.status]
print("Status: {}".format(status))
if status == 'Optimal':
 print("Optimal Solution:")
 print("x = {}".format(value(x)))
 print("y = {}".format(value(y)))
 print("Objective Function (Z) = {}".format(value(prob.objective)))

#3b1
P = [4, -2]
print("Original Point P: {}".format(P))
P_reflect_y_axis = [-P[0], P[1]]
print("Reflection through y-axis: {}".format(P_reflect_y_axis))
scaling_factor_x = 7
P_scaling_x = [scaling_factor_x * P[0], P[1]]
print("Scaling in X-coordinates by factor 7: {}".format(P_scaling_x))
shearing_factor_y = 3
P_shearing_y = [P[0], P[0] + shearing_factor_y * P[1]]
print("Shearing in Y-direction by 3 units: {}".format(P_shearing_y))
P_reflect_line = [-P[1], -P[0]]
print("Reflection through the line y = -x: {}".format(P_reflect_line))


