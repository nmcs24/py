#1a
import matplotlib.pyplot as plt 
import numpy as np 
def f(x): 
 return x**2 
def g(x): 
 return x**3 
x = np.linspace(-1, 1, 100) 
y_f = f(x) 
y_g = g(x) 
fig, ax = plt.subplots() 
ax.plot(x, y_f, label='f(x) = x^2') 
ax.plot(x, y_g, label='g(x) = x^3') 
ax.set_xlabel('x') 
ax.set_ylabel('y') 
ax.legend()# Set title
ax.set_title('2D Graph of f(x) = x^2 and g(x) = x^3')
plt.show()

#1c
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
x = np.linspace(-5, 5, 100)
y = np.linspace(-5, 5, 100)
X, Y = np.meshgrid(x, y)
Z = np.sin(X) + np.cos(Y)
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z, cmap='viridis')
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_title('3D Plot of z = sin(x) + cos(y)')
plt.show()

#2a
import numpy as np
A = np.array([5, 3])
B = np.array([1, 4])
def reflect(line, point):
 m = line[0]
 c = line[1]
 x, y = point
 x_reflect = (2 * m * (y - c) + x * (m ** 2 - 1)) / (m ** 2 + 1)
 y_reflect = (2 * m * x + y * (1 - m ** 2) + 2 * c) / (m ** 2 + 1)
 return np.array([x_reflect, y_reflect])
line = np.array([1, -1])
A_reflected = reflect(line, A)
B_reflected = reflect(line, B)
print("Reflected Point A':", A_reflected)
print("Reflected Point B':", B_reflected)

#2c
import numpy as np
A = np.array([0, 0])
B = np.array([5, 0])
C = np.array([3, 3])
AB = np.linalg.norm(B - A)
BC = np.linalg.norm(C - B)
CA = np.linalg.norm(A - C)
s = (AB + BC + CA) / 2
area = np.sqrt(s * (s - AB) * (s - BC) * (s - CA))
perimeter = AB + BC + CA
print("Triangle ABC:")
print("Side AB:", AB)
print("Side BC:", BC)
print("Side CA:", CA)
print("Area:", area)
print("Perimeter:", perimeter)

#3a1
from pulp import *
problem = LpProblem("LPP", LpMaximize)
x = LpVariable('x', lowBound=0, cat='Continuous')
y = LpVariable('y', lowBound=0, cat='Continuous')
problem += 150 * x + 75 * y, "Z"
problem += 4 * x + 6 * y <= 24, "Constraint1"
problem += 5 * x + 3 * y <= 15, "Constraint2"
problem.solve()
print("Status:", LpStatus[problem.status])
print("Optimal x =", value(x))
print("Optimal y =", value(y))
print("Optimal Z =", value(problem.objective

#3b1
import numpy as np
P = np.array([2, -3])
T1 = np.array([[1, 0], [0, -1]])
P_T1 = np.dot(T1, P)
T2 = np.array([[2, 0], [0, 1]])
P_T2 = np.dot(T2, P)
T3 = np.array([[1, 0], [0, 1.5]])
P_T3 = np.dot(T3, P)
T4 = np.array([[0, 1], [1, 0]])
P_T4 = np.dot(T4, P)
print("Original Point P: ", P)
print("Transformation 1: Reflection through X-axis: ", P_T1)
print("Transformation 2: Scaling in X-coordinate by factor 2: ", P_T2)
print("Transformation 3: Scaling in Y-coordinate by factor 1.5: ", P_T3)
print("Transformation 4: Reflection through the line y = x: ", P_T4)