#1a
import numpy as np 
import matplotlib.pyplot as plt 
from mpl_toolkits.mplot3d import Axes3D 
def func(x, y): 
 return np.cos(x**2 + y**2 - 0.5) 
x = np.linspace(-1, 1, 100) 
y = np.linspace(-1, 1, 100) 
X, Y = np.meshgrid(x, y) # Create a grid of x, y values 
Z = func(X, Y) # Compute z values using the function 
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d') 
ax.plot_surface(X, Y, Z, cmap='viridis') # Plot the surface 
ax.set_xlabel('X') 
ax.set_ylabel('Y') 
ax.set_zlabel('Z') 
ax.set_title('Surface Plot of z = cos(x**2 + y**2 - 0.5)') 
plt.show() # Show the plot

#1b
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
def func(x, y):
 return np.sin(x**2 + y**2)
x = np.linspace(0, 10, 100)
y = np.linspace(0, 10, 100)
X, Y = np.meshgrid(x, y) # Create a grid of x, y values
Z = func(X, Y) # Compute z values using the function
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z, cmap='viridis') # Plot the surface
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_title('Surface Plot of f(x) = sin(x**2 + y**2)')
plt.show() 

#2a
import matplotlib.pyplot as plt
vertex1 = (0, 0)
vertex2 = (4, 0)
vertex3 = (4, 3)
x = [vertex1[0], vertex2[0], vertex3[0], vertex1[0]]
y = [vertex1[1], vertex2[1], vertex3[1], vertex1[1]]
plt.plot(x, y, 'b-o', label='Triangle')
plt.plot(vertex1[0], vertex1[1], 'ro', label='Vertex 1')
plt.plot(vertex2[0], vertex2[1], 'go', label='Vertex 2')
plt.plot(vertex3[0], vertex3[1], 'mo', label='Vertex 3')
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Triangle with Vertices')
plt.legend()
plt.grid(True)
plt.show()

#2b
import numpy as np
start = -7
end = 7
num_subintervals = 50
x = np.linspace(start, end, num=num_subintervals+1)
print("Vector x:")
print(x)

#3a1
from scipy.optimize import linprog
c = [-5, -3]
A = [[1, 1],
 [2, 5]]
b = [7, 1]
x_bounds = (0, None)
y_bounds = (0, None)
res = linprog(c, A_ub=A, b_ub=b, bounds=[x_bounds, y_bounds])
if res.success:
 print("Optimal solution found:")
 print("x =", res.x[0])
 print("y =", res.x[1])
 print("Maximum value of Z =", -res.fun)
else:
 print("Optimization failed. Message:", res.message)

#3b2
import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.axhline(0, color='black')
ax.axvline(0, color='black')
green_triangle = plt.Polygon([[5, 4], [7, 4], [6, 6]], edgecolor='green', 
facecolor='none')
ax.add_patch(green_triangle)
blue_rectangle = plt.Polygon([[2, 2], [10, 2], [10, 8], [2, 8]], edgecolor='blue', 
facecolor='none')
ax.add_patch(blue_rectangle)
red_polygon = plt.Polygon([[6, 2], [10, 4], [8, 7], [4, 8], [2, 4]], edgecolor='red', 
facecolor='none')
ax.add_patch(red_polygon)
isosceles_triangle = plt.Polygon([[0, 0], [4, 0], [2, 4]], edgecolor='magenta', 
facecolor='none')
ax.add_patch(isosceles_triangle)
ax.set_xlim([-1, 11])
ax.set_ylim([-1, 11])
ax.set_xlabel('X-axis')
ax.set_ylabel('Y-axis')
ax.set_title('2D Shapes')
plt.show()
